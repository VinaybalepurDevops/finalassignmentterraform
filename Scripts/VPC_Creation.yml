module "vpc" {
  source = "terraform-aws-modules/vpc/aws"

  name = "my-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true
  enable_vpn_gateway = false

  tags = {
    Terraform   = "true"
    Environment = "dev"
  }
}

module "web_server_sg" {
  source = "terraform-aws-modules/security-group/aws//modules/http-80"

  name                = "jump-host"
  description         = "Allow SSH"
  vpc_id              = module.vpc.vpc_id
  ingress_cidr_blocks = ["10.0.101.0/24"]
  ingress_with_cidr_blocks = [
    {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      description = "User-service ports"
      cidr_blocks = "0.0.0.0/0"
    }
  ]
}


module "private_security_group" {
  source = "terraform-aws-modules/security-group/aws//modules/http-80"

  name                = "allports_open"
  description         = "Open ports for internal communication"
  vpc_id              = module.vpc.vpc_id
  ingress_cidr_blocks = ["10.0.1.0/24", "10.0.2.0/24"]
  ingress_with_cidr_blocks = [
    {
      from_port   = 0
      to_port     = 65535
      protocol    = "tcp"
      description = "Open ports for private subnet"
      cidr_blocks = "10.0.0.0/16"
    }
  ]
}

resource "tls_private_key" "this" {
  algorithm = "RSA"

}

module "key_pair" {
  source = "terraform-aws-modules/key-pair/aws"

  depends_on = [
    tls_private_key.this
  ]
  key_name   = "key_pair"
  public_key = tls_private_key.this.public_key_openssh
}

resource "local_file" "jump-key" {
  content  = tls_private_key.this.private_key_pem
  filename = "jump-key"
}

module "ec2_instance" {
  source = "terraform-aws-modules/ec2-instance/aws"
  depends_on = [
    module.key_pair
  ]

  name                        = "Jump host"
  ami                         = "ami-053b0d53c279acc90"
  instance_type               = "t2.micro"
  key_name                    = module.key_pair.key_pair_name
  monitoring                  = true
  associate_public_ip_address = true
  vpc_security_group_ids      = [module.web_server_sg.security_group_id]
  subnet_id                   = module.vpc.public_subnets[0]
  user_data                   = <<EOF
  #!/bin/bash
  echo "Installing ansible"
  yes " "|sudo apt-add-repository ppa:ansible/ansible
  sudo apt update
  sudo apt install ansible -y
  echo "Installed anisble"
  EOF
  tags = {
    Terraform = "true"
  }

}




module "ec2_instance_jenkins" {

  source = "terraform-aws-modules/ec2-instance/aws"

  depends_on = [
    module.key_pair
  ]

  name                   = "Jenkins"
  ami                    = "ami-053b0d53c279acc90"
  instance_type          = "t2.micro"
  key_name               = module.key_pair.key_pair_name
  monitoring             = true
  vpc_security_group_ids = [module.private_security_group.security_group_id]
  subnet_id              = module.vpc.private_subnets[0]

  tags = {
    Terraform    = "true"
    instancename = "jenkins"
  }
}


module "ec2_instance_app" {
  source = "terraform-aws-modules/ec2-instance/aws"
  depends_on = [
    module.key_pair
  ]
  name                   = "App"
  ami                    = "ami-053b0d53c279acc90"
  instance_type          = "t2.micro"
  key_name               = module.key_pair.key_pair_name
  monitoring             = true
  vpc_security_group_ids = [module.private_security_group.security_group_id]
  subnet_id              = module.vpc.private_subnets[1]

  tags = {
    Terraform    = "true"
    instancename = "app"
  }
}



resource "null_resource" "copy_key" {
  depends_on = [
    module.ec2_instance_app
  ]

  provisioner "local-exec" {

    command = "/bin/sh copyfile.sh  ${module.ec2_instance.public_ip}"
  }
}